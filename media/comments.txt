#######models.py########################

class Comment(models.Model):
    topic = models.ForeignKey(Upload_topics,on_delete=models.CASCADE,related_name='comments')
    name = models.CharField(max_length=80)
    email = models.EmailField()
    body = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    active = models.BooleanField(default=True)
    parent = models.ForeignKey('self', null=True, blank=True,on_delete=models.CASCADE, related_name='replies')

    class Meta:
        ordering = ['-created_on']

    def __str__(self):
        return 'Comment {} by {}'.format(self.body, self.name)
    
    def children(self):
        return Comment.objects.get(parent=self)
    @property
    def is_parent(self):
        if self.parent is not None:
            return False
        return True
##########################views
def post_detail(request):
    template_name = 'post_detail.html'
    post = get_object_or_404(Upload_topics, id=1)
    comments = post.comments.filter(active=True, parent__isnull=True)
    new_comment = None

    # Comment posted
    if request.method == 'POST':
        comment_form = CommentForm(data=request.POST)
        if comment_form.is_valid():
            parent_obj = None
            # get parent comment id from hidden input
            try:
                # id integer e.g. 15
                parent_id = int(request.POST.get('parent_id'))
            except:
                parent_id = None
            # if parent_id has been submitted get parent_obj id
            if parent_id:
                parent_obj = Comment.objects.get(id=parent_id)
                # if parent object exist
                if parent_obj:
                    # create replay comment object
                    replay_comment = comment_form.save(commit=False)
                    # assign parent_obj to replay comment
                    replay_comment.parent = parent_obj

            # Create Comment object but don't save to database yet
            new_comment = comment_form.save(commit=False)
            # Assign the current post to the comment
            new_comment.topic = post
            # Save the comment to the database
            new_comment.save()
            return redirect('e_learning:post_detail')
    else:
        
        comment_form = CommentForm(initial={'name': request.user,'email':request.user.userprofile.email})

    return render(request, template_name, {'post': post,
                                           'comments': comments,
                                           'new_comment': new_comment,
                                           'comment_form': comment_form})

#################################post_detail.html###########
{% extends 'base.html' %} {% block content %}
{% load crispy_forms_tags %}
<div class="container">
  <div class="row">
    <div class="col-md-8 card mb-4  mt-3 left  top">
      <div class="card-body">
        <h1>{% block title %} {{ post.topic }} {% endblock title %}</h1>
        <p class=" text-muted">{{ post.teacher }} | {{ post.date_of_record }}</p>
        <p class="card-text ">{{ post.content | safe }}</p>
      </div>
    </div>


    <div class="col-md-8 card mb-4  mt-3 ">
      <div class="card-body">
        <!-- comments -->
        <h2>{{ comments.count }} comments</h2>

        {% for comment in comments %}
        <div class="comments" style="padding: 10px;">
          <p class="font-weight-bold">
            {{ comment.name }}
            <small> 
            <span class=" text-muted font-weight-normal">
              {{ comment.created_on }}
            </span>
          </small>
          </p>
          {{ comment.body | linebreaks }}
          
          {% for replay in comment.replies.all %}
            <p class="info">{{ replay.name }} <small> <span class=" text-muted font-weight-normal">
              {{ replay.created_on }}</span></small></p>
            <li>{{ replay.body }}</li>
        {% endfor %}

        <h5>Reply</h5>
        <form action="." method="post">
          {{ comment_form.name.as_hidden }}
          {{ comment_form.email.as_hidden }}
          {{ comment_form.body |as_crispy_field}}
            {% csrf_token %}
            <!-- Hidden input for parent comment.id -->
            <input type="hidden" name="parent_id" value="{{ comment.id }}">
            <input class="btn btn-primary" type="submit" value="Reply">
        </form>
    </div>
        </div>
        {% endfor %}
      </div>
    </div>
    <div class="col-md-8 card mb-4  mt-3 ">
      <div class="card-body">
        {% if new_comment %}
        <div class="alert alert-success" role="alert">
          Your comment is awaiting moderation
        </div>
        {% else %}
        <h3>Leave a comment</h3>
        <form method="post" style="margin-top: 1.3em;">
          {{ comment_form.name.as_hidden }}
          {{ comment_form.email.as_hidden }}
          {{ comment_form.body |as_crispy_field}}
          {% csrf_token %}
          <button type="submit" class="btn btn-primary  btn-lg">Submit</button>
        </form>
        {% endif %}

        
      </div>
    </div>

  </div>
</div>
{% endblock content %}

###################################forms.py
class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ('name', 'email', 'body')
#############################################admin.py##################
@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('name', 'body', 'topic', 'created_on', 'active')
    list_filter = ('active', 'created_on')
    search_fields = ('name', 'email', 'body')
    actions = ['approve_comments']

    def approve_comments(self, request, queryset):
        queryset.update(active=True)




